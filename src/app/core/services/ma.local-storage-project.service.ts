import {Injectable} from '@angular/core';import {SHBaseService, SHPKDTOAuditFull, SHPKDTOAuditFullState, SHSearchResult, SHUtils} from '@sh/base';import {MAProject, MAProjectCreate, MAProjectPartial, MAProjectSearch} from '../domaines/ma-project';import {SHLocalStorageService} from '@sh/core'import {Observable, of} from 'rxjs';import {MA_LOCAL_STORAGE_PROJECTS} from '../constants/ma-constant';import {randomUUID} from 'node:crypto';@Injectable({providedIn: 'root'})export class MALocalStorageProjectService extends SHBaseService<MAProject, MAProjectPartial, MAProjectSearch>{    constructor(private localeStorageService: SHLocalStorageService) {        super();    }    public create(body: MAProjectCreate):Observable<MAProject>{        const newProject = this.toProject(body);        const projects = this.getProjects();        projects.push(newProject);        return of(newProject);    }    public find(search: MAProjectSearch):Observable<MAProjectPartial[]>{      //TODO: Handle filter here        return of(this.getProjects().map(project => this.toPartial(project)))    }    public purge(projectID: string):Observable <void>{        const project = this.getProject(projectID);        const projects = this.getProjects();        const internalProjectID = projects.findIndex(p => p = project);        projects.splice(internalProjectID, 1);        this.setProjects(projects);        return of();    }    public retrieve(projectID: string):Observable <MAProject>{        return of(this.getProject(projectID));    }    public search(search: MAProjectSearch): Observable<SHSearchResult<MAProjectPartial>{        //TODO: Handle filter here        return of({                total: this.getProjects().length,                data: this.getProjects(),                pagination: {                    page: 0,                    size: 10                }}        )    }    public setAsDeleted(resourceID: string): Observable<SHPKDTOAuditFull>{        return undefined;    }   public update(resourceID: string, fieldValueData: any): Observable<MAProject>{        return undefined;    }    private toPartial(project: MAProject): MAProjectPartial {        return {            key: project.key,            lead: project.lead,            logo: project.logo,            name: project.name,            starred: project.starred,            type: project.type        }    }    private toProject(projectCreate: MAProjectCreate): MAProject {        return {            activeUpdatedBy: undefined,            createdBy: undefined,            createdOn: new Date().toISOString(),            id: randomUUID(),            key: projectCreate.key,            lead: undefined,            name: projectCreate.name,            state: SHPKDTOAuditFullState.ACTIVE,            type: projectCreate.type,        }    }    private getProjects(): MAProject[] {       return  this.localeStorageService.getObject(MA_LOCAL_STORAGE_PROJECTS) ? this.localeStorageService.getObject(MA_LOCAL_STORAGE_PROJECTS) : [];    }    private getProject(projectID: string): MAProject {        SHUtils.notEmpty(projectID, "projectID");       const projects = this.getProjects();       if(SHUtils.isEmpty(projects)) throw Error('Project list is empty');       else {           const project = projects?.find(item => item.id === projectID);           if(SHUtils.isEmpty(project)) throw Error(`'Cannot retrieve Project with ID ${projectID}`);           else return project!       }    }    private setProjects(projects: MAProject[]): void {        this.localeStorageService.setObject(MA_LOCAL_STORAGE_PROJECTS, projects);    }}